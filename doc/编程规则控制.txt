库分类和定义规则

一级库：仅依靠系统提供的头文件实现功能
二级库：依靠一级自建库来实现功能，以及第三方库
三级库：依靠二级自建库、以及第三方库来实现功能，以及需要其他第三方库的第三方库

尽量避免使用函数指针和回调
使用函数指针和回调的场景（主要是调度系统），采用的函数指针和回调函数风格尽量统一化，传入的参数进行封装，在函数内部再进行解码


函数和变量命名规则

宏定义：
    大写字母和数字组成，中间可以下划线分隔，如 CPU_8051

全局变量：gXXXX


结构体：定义 struct XxxxXxx_t  实例  XxxxXxx_t xxxXxx   
类：    定义  class  XxxxXxx_c  实例   XxxxXxx_c xxxXxx

实例可略微简写，也可仅省略_t, 一般来说传入的形参会略微简写，和定义在同一层的只省略_t
struct QueueItem_t      QueueItem_t queueItem    QueueItem_t item


外部函数：Xxxx_xxxx_xxxx()   首字母大写
内部函数：xxxx_xxxx_xxxx()   首字母小写

函数名 首字母大写、下划线、首字母小写    Create_thread()    Remove_base_station_by_ID()
变量名 首字母小写、无下划线、首字母大写  smtpThread         conChannelID   nameOfDatabase  databaseName

一般来说  函数才用下划线  变量不用下划线   宏定义和全局变量等全大写的可以加下划线


对于一个工程来说


为了避免混用宏定义  利用



函数返回值  
如果是一个操作，对于INT类型  返回0为正常，返回其他为异常

如果是创建变量，修改变量，对于指针类型，返回NULL为异常，返回指针为正常


头文件和源文件应当包含的内容

头文件 只包含结构体、供外部使用的函数声明、以及必要引用的其他头文件

源文件 包含函数实现所需的头文件，  且要在头部添加内部函数声明  在下面再添加具体定义
（即保证无论是内部函数还是外部函数，都有一个说明的声明，同时还有一个函数实现 

函数的规范化 
在函数的声明部分要明确各个形参的含义以及格式，以及返回值的意义



头文件和源文件命名规则
小写加下划线的形式  
头文件的规范形式   
/*
    ---------------
*/
#ifndef _XXXX_XXX_XX_H 
#define _XXXX_XXX_XX_H 
    ---------------
#endif // _XXXX_XXX_XX_H




调试信息输出规范：
zui





构造函数  只构造 不启动，只需要把初始的东西都设置好  
然后再调用一个函数启动它



对于一个对象来说，自身的成员要由自身的方法来处理，外部只能调用方法






返回值规则 

对于成功与否的判断  int类型/bool类型？
成功返回1 失败返回0  成功返回true 失败返回flase  